#!/usr/bin/env perl
# vim:ft=perl:ts=4:sts=4:sw=4
use strict;
use warnings;

######################################################################

system "perl -c -Ilib bin/genesis";
die "Perl compilation failed, not packing\n" if $?;

# ---
# Build package structure
# ---
system 'rm -rf pkg/ pkg.tgz && mkdir pkg';
die "Could not create a clean package staging area\n" if $?;

system 'cp -a lib pkg/';
die "Could not copy library into the package staging area\n" if $?;

# ---
# Version Handling
# ---
my $stub_out = ($ENV{GENESIS_PACK_PATH}||".")."/genesis-";
my $VERSION = $ARGV[0] || '';
if ($VERSION) {
    $stub_out .= $VERSION;
} else {
	chomp(my $sha1 = qx(git rev-parse HEAD));
	$sha1 = substr($sha1, 0, 10);
	$stub_out .= "$sha1";
	if (qx(git status --porcelain bin/genesis bin/genesis-v1 lib/)) {
		$sha1 .= '+';
		$stub_out .= "-dirty";
	}
	$VERSION = "3.x.x (devel-$sha1)";
}

# ---
# Brand script with version
# ---
open my $out, ">", "pkg/genesis"
	or die "Failed to open pkg/genesis for writing: $!\n";
open my $in, "<", "bin/genesis"
	or die "Failed to open bin/genesis for reading: $!\n";

while (<$in>) {
	s/^our \$VERSION = .*$/our \$VERSION = \"$VERSION\";/;
	print $out $_;
}

close $out;
close $in;
chmod 0755, $out;

# ---
# Checksum and tar up the package
# ---
my $checksum = qx(tar -czf - -C pkg . | sha1sum | awk '{print \$1}');
die "Failed to generate a checksup of the package:\n$checksum\n" if $?;
open my $csfh, ">", "pkg/checksum"
    or die "Failed to open pkg/checksum for writing: $!\n";
print $csfh $checksum."\n";
close $csfh;

system 'tar -czf pkg.tgz -C pkg .';
die "Failed to create package tarball\n" if $?;

open my $o, ">", $stub_out
    or die "Failed to open $stub_out for writing: $!\n";

print $o <<'EOF';
#!/usr/bin/perl
# Genesis Extraction and Execution Stub Engine (GEESE)
#
# This perl script contains the entire runtime environment needed to execute 
# Genesis.  It unpacks the compressed contents into your ~/.genesis/ directory
# then passes execution to the ~/.genesis/code/genesis Perl script that was
# extracted, using the libraries located in ~/.genesis/code/lib.
#
# Once extracted, further execution of this stub will use the previously
# extracted library after checking that the checksum is identical.  This way,
# new versions will be properly handled.

for (qw(.genesis .genesis/code)) {
	mkdir "$ENV{HOME}/$_" unless -d "$ENV{HOME}/$_";
}
use FindBin;
$ENV{GENESIS} = $FindBin::Script;
my $root = "$ENV{HOME}/.genesis/code";

# check the checksum to see if we should untar
chomp(my $want = <DATA>);
open my $fh, "<", "$root/checksum";
chomp(my $actual = <$fh>);
close $fh;

if ($want ne $actual) {
	system("rm -rf $root/*");

	# extract the payload
	print STDERR "(inflating genesis runtime...)\n";
	open my $tar, "|-", "tar -xzf - -C $root"
		or die "Failed to do stuff\n";
	while (<DATA>) {
		# Convert base64 to binary, then...
		print $tar $_;
	}
	close $tar;
}

# run it!
$ENV{PERL5LIB} = "$root/lib";
exec "$root/genesis", @ARGV;

EOF
print $o "__DATA__\n$checksum\n";

use MIME::Base64 qw(encode_base64);
my $buf;
open my $tbfh, "< :raw :bytes", "pkg.tgz"
	or die "Could not open tarball for reading: $!\n";

while (read($tbfh, $buf, 60*57)) {
	print $o encode_base64($buf);
}
close $o;
chmod 0755, $out;
print "packaged v$VERSION as $stub_out\n";
